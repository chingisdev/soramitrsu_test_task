{"version":3,"sources":["components/Cell/Cell.module.css","components/Game/Game.module.css","components/Board/Board.module.css","components/Reset/Reset.module.css","constants.js","utils.js","components/Message/Message.jsx","images/cross4.svg","components/Cell/Cross.jsx","images/zero2.svg","components/Cell/Zero.jsx","components/Cell/Cell.jsx","components/Board/Board.jsx","components/Reset/Reset.js","components/Game/Game.jsx","App.js","index.js"],"names":["module","exports","winningPositions","searchPlayerPositions","board","player","result","Array","fill","i","length","findDimensions","searcher","opponent","dimensions","fullness","count","array","j","pos","push","hasCriticalMove","indexOf","makeStep","dimension","possibleCells","way","filter","cell","findEmptyCells","maxPossibleDimension","choseDimension","Math","floor","random","detectPosition","playerPositions","cpuPositions","playerDim","playerFul","cpuDimension","cpuFul","lastIndexOf","findEmpty","attack","Message","value","className","Cross","src","cross","alt","style","pic__style","Zero","zero","Cell","name","onClick","cell__style","renderValue","Board","board__style","map","ignored","index","Reset","reset__style","Game","useState","setBoard","isPlayer","setIsPlayer","message","setMessage","mounted","useRef","useEffect","ms","current","Promise","resolve","setTimeout","then","computerTurn","prepareForNextMove","boardCopy","a","b","c","isWon","nextPlayer","updateBoard","findOptimalPosition","game__style","info__style","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b1287fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell__style\":\"Cell_cell__style__1E306\",\"pic__style\":\"Cell_pic__style__1mF-M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game__style\":\"Game_game__style__mX2GT\",\"info__style\":\"Game_info__style__eOFu0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board__style\":\"Board_board__style__2mcip\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"reset__style\":\"Reset_reset__style__2k2Dd\"};","export const winningPositions = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n];\n\nexport const computerAnswerSpeed = 1000;\n","import { winningPositions } from \"./constants\";\n\nexport const isWon = (board) => {\n    for (let i = 0; i < winningPositions.length; i++) {\n        let [a, b, c] = winningPositions[i];\n        if (board[a] !== \"\") {\n            if (board[a] === board[b] && board[a] === board[c]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nconst searchPlayerPositions = (board, player) => {\n    const result = Array(9).fill(-1)\n    for (let i = 0; i < board.length; i++) {\n        if (board[i] === player) {\n            result[i] = i;\n        }\n    }\n    return result;\n}\n\nconst findDimensions = (searcher, opponent) => {\n    const dimensions = [];\n    const fullness = []\n    for (let i = 0; i < winningPositions.length; i++) {\n        let count = 0;\n        const array = winningPositions[i];\n        for (let j = 0; j < array.length; j++) {\n            let pos = array[j];\n            if (opponent[pos] !== -1) {\n                count = 0;\n                break;\n            }\n            if (searcher[pos] !== -1) {\n                count += 1;\n            }\n        }\n        if (count > 0) {\n            dimensions.push(winningPositions[i]);\n            fullness.push(count);\n        }\n    }\n    return { dimensions: dimensions, fullness: fullness };\n}\n\n\nconst hasCriticalMove = (fullness) => {\n    return fullness.indexOf(2) !== -1 ? 1 : 0;\n}\n\nconst choseDimension = (fullness) => {\n    const maxPossibleDimension = fullness.indexOf(2);\n    if (maxPossibleDimension > -1) {\n        return maxPossibleDimension;\n    }\n    return fullness.indexOf(1);\n}\n\nconst findEmptyCells = (board, way) => {\n    return way.filter((cell) => board[cell] === '');\n}\n\nconst findEmpty = (board) => {\n    return board.lastIndexOf('');\n}\n\nfunction random(array) {\n    return Math.floor(Math.random() * array.length);\n}\n\nfunction attack(board, cpuDimension, cpuFul) {\n    if (cpuDimension.length) {\n        return makeStep(cpuDimension, cpuFul, board);\n    } else {\n        return findEmpty(board);\n    }\n}\n\nfunction makeStep(dimension, fullness, board) {\n    const maxIndex = choseDimension(fullness);\n    const row = dimension[maxIndex];\n    const possibleCells = findEmptyCells(board, row);\n    return possibleCells[random(possibleCells)];\n}\n\nfunction detectPosition(playerPositions, cpuPositions, board) {\n    const {dimensions: playerDim, fullness: playerFul} = findDimensions(playerPositions, cpuPositions);\n    const {dimensions: cpuDimension, fullness: cpuFul} = findDimensions(cpuPositions, playerPositions);\n    const response = !hasCriticalMove(playerFul) || hasCriticalMove(cpuFul);\n    if (response) {\n        return attack(board, cpuDimension, cpuFul);\n    } else {\n        return makeStep(playerDim, playerFul, board);\n    }\n}\n\nexport const findOptimalPosition = (board) => {\n    const playerPositions = searchPlayerPositions(board, 'X');\n    const cpuPositions = searchPlayerPositions(board, '0');\n    if (playerPositions[4] === -1 && cpuPositions[4] === -1) {\n        return 4;\n    } else {\n        return detectPosition(playerPositions, cpuPositions, board);\n    }\n}\n","import React from 'react';\nimport './Message.css';\n\nfunction Message({ value }) {\n    return (\n        <p className={\"message__style\"}>{value}</p>\n    );\n}\n\nexport default Message;\n","export default __webpack_public_path__ + \"static/media/cross4.7805e1b2.svg\";","import React from 'react';\nimport cross from '../../images/cross4.svg';\nimport style from './Cell.module.css'\n\nconst Cross = () => {\n    return (\n        <img src={cross} alt=\"X\" className={style.pic__style}/>\n    );\n};\n\nexport default Cross;\n","export default __webpack_public_path__ + \"static/media/zero2.7cebdd7d.svg\";","import React from 'react';\nimport zero from '../../images/zero2.svg';\nimport style from './Cell.module.css';\n\nconst Zero = () => {\n    return (\n        <img src={zero} alt=\"0\" className={style.pic__style}/>\n    );\n};\n\nexport default Zero;\n","import React from 'react';\nimport style from './Cell.module.css';\nimport Cross from \"./Cross\";\nimport Zero from \"./Zero\";\n\nconst Cell = ({name, onClick, value}) => {\n    function renderValue(value) {\n           switch (value) {\n               case \"X\": {\n                   return <Cross />;\n               }\n               case \"0\": {\n                   return <Zero />;\n               }\n               default: {\n                   return \"\";\n               }\n           }\n    }\n\n    return (\n        <button\n            className={style.cell__style}\n            name={name}\n            onClick={onClick}\n        >\n            {renderValue(value)}\n        </button>\n    );\n};\n\nexport default Cell;\n","import React from 'react';\nimport Cell from \"../Cell/Cell\";\nimport style from './Board.module.css';\n\n\nconst Board = ({ onClick, value}) => {\n    return (\n        <div className={style.board__style}>\n            {[ ...Array(9)].map((ignored, index) => (\n                <Cell\n                    key={index}\n                    name={index}\n                    onClick={() => onClick(index)}\n                    value={value[index]} />)\n                )\n            }\n        </div>\n    );\n};\n\nexport default Board;\n","import React from 'react';\nimport style from './Reset.module.css'\n\nconst Reset = ({ onClick }) => {\n    return (\n        <button className={style.reset__style} onClick={onClick}>\n            Restart\n        </button>\n    );\n};\n\nexport default Reset;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { isWon, findOptimalPosition } from '../../utils'\nimport Message from \"../Message/Message\";\nimport Board from \"../Board/Board\";\nimport Reset from \"../Reset/Reset\";\nimport style from './Game.module.css';\nimport { computerAnswerSpeed } from \"../../constants\";\n\nconst Game = () => {\n    const [board, setBoard] = useState(Array(9).fill(\"\"));\n\n    const [isPlayer, setIsPlayer] = useState(\"X\");\n    const [message, setMessage] = useState(\"Start game\");\n    const mounted = useRef(false);\n\n    useEffect(() => {\n        if (mounted.current) {\n            if (isPlayer === '0') {\n                sleep(computerAnswerSpeed).then(() => {\n                    computerTurn();\n                })\n            }\n        } else {\n            mounted.current = true;\n        }\n    }, [isPlayer]);\n\n    const reset = () => {\n        setBoard(Array(9).fill(\"\"));\n        setMessage('Start game');\n        setIsPlayer(\"X\");\n    }\n\n    const prepareForNextMove = (boardCopy) => {\n        if (isWon(boardCopy)) {\n            setMessage(`${isPlayer === 'X' ? 'Player won' : 'Computer won'}`);\n            setIsPlayer('');\n            return;\n        }\n\n        if (boardCopy.indexOf(\"\") === -1) {\n            setMessage(\"Draw\");\n            setIsPlayer(\"\");\n        } else {\n            let nextPlayer = isPlayer === \"X\" ? \"0\" : \"X\";\n            setIsPlayer(nextPlayer);\n            setMessage(`Now is ${nextPlayer}'s move`);\n        }\n    }\n\n    const handleInput = (pos) => {\n        if (isPlayer !== \"X\" || board[pos] !== \"\") {\n            return;\n        }\n        const boardCopy = updateBoard(pos);\n        prepareForNextMove(boardCopy);\n    }\n\n\n\n    const updateBoard = (pos) => {\n        const boardCopy = [...board];\n        boardCopy[pos] = isPlayer;\n        setBoard(boardCopy);\n        return boardCopy;\n    }\n\n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    const computerTurn = () => {\n        const pos = findOptimalPosition(board);\n        if (board[pos] !== \"\") {\n            return;\n        }\n        const boardCopy = updateBoard(pos);\n        prepareForNextMove(boardCopy);\n    }\n\n    return (\n        <div className={style.game__style}>\n            <div className={style.info__style}>\n                <Message value={message}/>\n                <Reset onClick={reset} value={'Refresh'} />\n            </div>\n            <Board onClick={handleInput} value={board} />\n        </div>\n    );\n};\n\nexport default Game;\n","import React from 'react'\nimport Game from './components/Game/Game';\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}