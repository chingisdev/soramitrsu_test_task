{"version":3,"sources":["components/Game/Game.module.css","components/Message/Message.module.css","components/Cell/Cell.module.css","components/Board/Board.module.css","components/Reset/Reset.module.css","constants.js","utils.js","components/Message/Message.jsx","components/Cell/Cell.jsx","components/Board/Board.jsx","components/Reset/Reset.js","components/Game/Game.jsx","App.js","index.js"],"names":["module","exports","winningPositions","searchPlayerPositions","board","player","result","Array","fill","i","length","findDimensions","searcher","opponent","dimensions","fullness","count","array","j","pos","push","hasCriticalMove","indexOf","findEmptyCells","way","random","Math","floor","detectPosition","playerPositions","cpuPositions","playerDim","playerFul","response","cpuDimension","cpuFul","ownMove","cpuRow","possibleCells","lastIndexOf","findEmpty","attack","row","defence","Message","value","className","style","message__style","Cell","name","onClick","cell__style","Board","board__style","map","ignored","index","Reset","reset__style","Game","useState","setBoard","isPlayer","setIsPlayer","message","setMessage","mounted","useRef","useEffect","ms","current","Promise","resolve","setTimeout","then","computerTurn","prepareForNextMove","boardCopy","a","b","c","isWon","nextPlayer","updateBoard","findOptimalPosition","game__style","info__style","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5ec34bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game__style\":\"Game_game__style__mX2GT\",\"info__style\":\"Game_info__style__eOFu0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message__style\":\"Message_message__style__1kP8f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell__style\":\"Cell_cell__style__1E306\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board__style\":\"Board_board__style__2mcip\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"reset__style\":\"Reset_reset__style__2k2Dd\"};","export const winningPositions = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n];\n\nexport const computerAnswerSpeed = 1000;\n","import { winningPositions } from \"./constants\";\n\nexport const isWon = (board) => {\n    for (let i = 0; i < winningPositions.length; i++) {\n        let [a, b, c] = winningPositions[i];\n        if (board[a] !== \"\") {\n            if (board[a] === board[b] && board[a] === board[c]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nconst searchPlayerPositions = (board, player) => {\n    const result = Array(9).fill(-1)\n    for (let i = 0; i < board.length; i++) {\n        if (board[i] === player) {\n            result[i] = i;\n        }\n    }\n    return result;\n}\n\nconst findDimensions = (searcher, opponent) => {\n    const dimensions = [];\n    const fullness = []\n    for (let i = 0; i < winningPositions.length; i++) {\n        let count = 0;\n        let array = winningPositions[i];\n        for (let j = 0; j < array.length; j++) {\n            let pos = array[j];\n            if (opponent[pos] !== -1) {\n                count = 0;\n                break;\n            }\n            if (searcher[pos] !== -1) {\n                count += 1;\n            }\n        }\n        if (count > 0) {\n            dimensions.push(winningPositions[i]);\n            fullness.push(count);\n        }\n    }\n    return { dimensions: dimensions, fullness: fullness };\n}\n\n\nconst hasCriticalMove = (fullness) => {\n    return fullness.indexOf(2);\n}\n\nconst findEmptyCells = (board, way) => {\n    const result = [];\n    for (let i = 0; i < way.length; i++) {\n        if (board[way[i]] === '') {\n            result.push(way[i]);\n        }\n    }\n    return result;\n}\n\nconst findEmpty = (board) => {\n    return board.lastIndexOf('');\n}\n\nfunction random(array) {\n    return Math.floor(Math.random() * array.length);\n}\n\nfunction attack(cpuPositions, playerPositions, board) {\n    const {dimensions: cpuDimension, fullness: cpuFul} = findDimensions(cpuPositions, playerPositions);\n    if (cpuDimension.length) {\n        let ownMove = hasCriticalMove(cpuFul);\n        if (ownMove === -1) {\n            ownMove = cpuFul.indexOf(1);\n        }\n        const cpuRow = cpuDimension[ownMove];\n        const possibleCells = findEmptyCells(board, cpuRow)\n        return possibleCells[random(possibleCells)];\n    } else {\n        return findEmpty(board);\n    }\n}\n\nfunction defence(playerDim, response, board) {\n    const row = playerDim[response];\n    const possibleCells = findEmptyCells(board, row);\n    return possibleCells[random(possibleCells)];\n}\n\nfunction detectPosition(playerPositions, cpuPositions, board) {\n    const {dimensions: playerDim, fullness: playerFul} = findDimensions(playerPositions, cpuPositions);\n    const response = hasCriticalMove(playerFul);\n    if (response === -1) {\n        return attack(cpuPositions, playerPositions, board);\n    } else {\n        return defence(playerDim, response, board);\n    }\n}\n\nexport const findOptimalPosition = (board) => {\n    const playerPositions = searchPlayerPositions(board, 'X');\n    const cpuPositions = searchPlayerPositions(board, '0');\n    if (playerPositions[4] === -1 && cpuPositions[4] === -1) {\n        return 4;\n    } else {\n        return detectPosition(playerPositions, cpuPositions, board);\n    }\n}\n","import React from 'react';\nimport style from './Message.module.css';\n\nconst Message = ({ value }) => {\n    return (\n        <h2 className={style.message__style}>{value}</h2>\n    );\n};\n\nexport default Message;\n","import React from 'react';\nimport style from './Cell.module.css';\n\nconst Cell = ({name, onClick, value}) => {\n    return (\n        <button\n            className={style.cell__style}\n            name={name}\n            onClick={onClick}\n        >\n            {value}\n        </button>\n    );\n};\n\nexport default Cell;\n","import React from 'react';\nimport Cell from \"../Cell/Cell\";\nimport style from './Board.module.css';\n\n\nconst Board = ({ onClick, value}) => {\n    return (\n        <div className={style.board__style}>\n            {[ ...Array(9)].map((ignored, index) => (\n                <Cell\n                    key={index}\n                    name={index}\n                    onClick={() => onClick(index)}\n                    value={value[index]} />)\n                )\n            }\n        </div>\n    );\n};\n\nexport default Board;\n","import React from 'react';\nimport style from './Reset.module.css'\n\nconst Reset = ({ onClick }) => {\n    return (\n        <button className={style.reset__style} onClick={onClick}>\n            Restart\n        </button>\n    );\n};\n\nexport default Reset;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { isWon, findOptimalPosition } from '../../utils'\nimport Message from \"../Message/Message\";\nimport Board from \"../Board/Board\";\nimport Reset from \"../Reset/Reset\";\nimport style from './Game.module.css';\nimport { computerAnswerSpeed } from \"../../constants\";\n\nconst Game = () => {\n    const [board, setBoard] = useState(Array(9).fill(\"\"));\n\n    const [isPlayer, setIsPlayer] = useState(\"X\");\n    const [message, setMessage] = useState(\"Start game\");\n    const mounted = useRef(false);\n\n    useEffect(() => {\n        if (mounted.current) {\n            if (isPlayer === '0') {\n                sleep(computerAnswerSpeed).then(() => {\n                    computerTurn();\n                })\n            }\n        } else {\n            mounted.current = true;\n        }\n    }, [isPlayer]);\n\n    const reset = () => {\n        setBoard(Array(9).fill(\"\"));\n        setMessage('Start game');\n        setIsPlayer(\"X\");\n    }\n\n    const prepareForNextMove = (boardCopy) => {\n        if (isWon(boardCopy)) {\n            setMessage(`${isPlayer === 'X' ? 'Player won' : 'Computer won'}`);\n            setIsPlayer('');\n            return;\n        }\n\n        if (boardCopy.indexOf(\"\") === -1) {\n            setMessage(\"Draw\");\n            setIsPlayer(\"\");\n        } else {\n            let nextPlayer = isPlayer === \"X\" ? \"0\" : \"X\";\n            setIsPlayer(nextPlayer);\n            setMessage(`Now is ${nextPlayer}'s move`);\n        }\n    }\n\n    const handleInput = (pos) => {\n        if (isPlayer !== \"X\" || board[pos] !== \"\") {\n            return;\n        }\n        const boardCopy = updateBoard(pos);\n        prepareForNextMove(boardCopy);\n    }\n\n\n\n    const updateBoard = (pos) => {\n        const boardCopy = [...board];\n        boardCopy[pos] = isPlayer;\n        setBoard(boardCopy);\n        return boardCopy;\n    }\n\n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    const computerTurn = () => {\n        const pos = findOptimalPosition(board);\n        if (board[pos] !== \"\") {\n            return;\n        }\n        const boardCopy = updateBoard(pos);\n        prepareForNextMove(boardCopy);\n    }\n\n    return (\n        <div className={style.game__style}>\n            <div className={style.info__style}>\n                <Message value={message}/>\n                <Reset onClick={reset} value={'Refresh'} />\n            </div>\n            <Board onClick={handleInput} value={board} />\n        </div>\n    );\n};\n\nexport default Game;\n","import React from 'react'\nimport Game from './components/Game/Game';\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}